{"version":3,"sources":["components/Weather.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","desc","Form","err","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","API_KEY","App","state","undefined","country","icon","mainTemp","celsius","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","setState","sys","calCelsius","main","temp","weather","description","getWeatherIcon","id","Math","floor","icons","rangeID","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a711307.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                </h5>\r\n                {\r\n                    props.temp_celsius ? <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1> : null\r\n                }\r\n                {/* Show min and max temp */}\r\n                {\r\n                    minmaxTemp(props.temp_min, props.temp_max)\r\n                }\r\n                <h3 className=\"py-3\">{props.desc}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport \"./Form.css\";\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.err ? error() : null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"Enter The City\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Enter The Country\" />\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error() {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role='alert'>\r\n            Please Enter City & Country Name\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from \"react\";\r\n\r\nimport './App.css';\r\n\r\nimport Weather from './components/Weather';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'weather-icons/css/weather-icons.css';\r\nimport Form from \"./components/Form\";\r\n\r\nconst API_KEY = \"215b5eb3112de294a09fa12c2565b959\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    city: undefined,\r\n    country: undefined,\r\n    icon: undefined,\r\n    mainTemp: undefined,\r\n    celsius: undefined,\r\n    temp_min: undefined,\r\n    temp_max: undefined,\r\n    desc: \"\",\r\n    err: false\r\n  };\r\n\r\n  weatherIcon = {\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\"\r\n  }\r\n\r\n  // convert deg f to deg c\r\n  calCelsius(temp) {\r\n    let celsius = Math.floor(temp - 273.15);\r\n    return celsius;\r\n  }\r\n\r\n  getWeatherIcon(icons, rangeID) {\r\n    switch (true) {\r\n      case rangeID >= 200 && rangeID <= 232:\r\n        this.setState({\r\n          icon: this.weatherIcon.Thunderstorm\r\n        });\r\n        break;\r\n      case rangeID >= 300 && rangeID <= 321:\r\n        this.setState({\r\n          icon: this.weatherIcon.Drizzle\r\n        });\r\n        break;\r\n      case rangeID >= 500 && rangeID <= 531:\r\n        this.setState({\r\n          icon: this.weatherIcon.Rain\r\n        });\r\n        break;\r\n      case rangeID >= 600 && rangeID <= 622:\r\n        this.setState({\r\n          icon: this.weatherIcon.Snow\r\n        });\r\n        break;\r\n      case rangeID >= 701 && rangeID <= 781:\r\n        this.setState({\r\n          icon: this.weatherIcon.Atmosphere\r\n        });\r\n        break;\r\n      case rangeID === 800:\r\n        this.setState({\r\n          icon: this.weatherIcon.Clear\r\n        });\r\n        break;\r\n      case rangeID >= 801 && rangeID <= 804:\r\n        this.setState({\r\n          icon: this.weatherIcon.Clouds\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          icon: this.weatherIcon.Clouds\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    if (city && country) {\r\n      //an api call to get data from the weather website\r\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\r\n\r\n      //catch response and convert it into json\r\n      const response = await api_call.json();\r\n\r\n      this.setState({\r\n        city: `${response.name}, ${response.sys.country}`,\r\n        celsius: this.calCelsius(response.main.temp),\r\n        temp_min: this.calCelsius(response.main.temp_min),\r\n        temp_max: this.calCelsius(response.main.temp_max),\r\n        desc: response.weather[0].description,\r\n        err: false\r\n      })\r\n\r\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\r\n    } else {\r\n      this.setState({ err: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Form\r\n          err={this.state.err}\r\n          loadWeather={this.getWeather}\r\n        />\r\n        <Weather\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          temp_celsius={this.state.celsius}\r\n          temp_min={this.state.temp_min}\r\n          temp_max={this.state.temp_max}\r\n          desc={this.state.desc}\r\n          weatherIcon={this.state.icon}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}